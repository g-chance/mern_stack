{"version":3,"sources":["views/Main.js","views/NewProject.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","useState","projects","setProjects","DOM","setDOM","useEffect","axios","get","then","res","console","log","test","Date","data","dueDate","getTime","catch","err","changeStatus","e","project","put","_id","status","target","value","className","style","backgroundColor","map","i","key","description","color","now","onClick","delete","deleteProject","to","NewProject","form","setForm","errState","setErrState","disabled","setDisabled","length","onChangeHandler","name","action","onSubmit","preventDefault","post","navigate","errors","response","errsDict","message","onSubmitHandler","htmlFor","type","onChange","App","margin","padding","border","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.0beb4e6d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link } from '@reach/router';\n\nconst Main = (props) => {\n\n    const [projects, setProjects] = useState(\n        []\n    )\n    const [DOM, setDOM] = useState(true)\n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/projects`)\n        .then(res => {\n            console.log(res)\n            let test = new Date(res.data.projects[0].dueDate).getTime()\n            \n            console.log(test)\n            console.log(res.data.projects[0].dueDate)\n            setProjects(res.data.projects)\n        })\n        .catch(err => console.log(err))\n    }, [DOM])\n\n    const changeStatus = (e, project) => {\n        axios.put(`http://localhost:8000/api/projects/edit/${project._id}`, {\n            status: e.target.value\n        })\n        .then(res => {\n            console.log(res)\n            setDOM(!DOM)\n        })\n        .catch(err => console.log(err))\n    }\n\n    const deleteProject = (e, project) => {\n        axios.delete(`http://localhost:8000/api/projects/delete/${project._id}`)\n        .then(res => {\n            console.log(res)\n            setDOM(!DOM)\n        })\n        .catch(err => console.log(err))\n    }\n\n    return (\n        <>\n            \n            <div className='main'>\n                <div className='main-1'>\n                    <h2 style={{backgroundColor: 'red'}}>Backlog</h2>\n                    { projects[0] && projects.map((project, i) => (\n                        project.status === 0 &&\n                    <div className='project' key={i}>\n                        <h4>{project.description}</h4>\n                    <p style={{color: new Date(project.dueDate).getTime() < Date.now() && 'red'}}><span>Due:</span> {project.dueDate}</p>\n                        <button value='1' onClick={e => changeStatus(e, project)}>Start Project</button>\n                    </div>\n                    ))}\n                </div>\n                <div className='main-2'>\n                    <h2 style={{backgroundColor: 'yellow'}}>In Progress</h2>\n                    { projects[0] && projects.map((project, i) => (\n                        project.status === 1 &&\n                    <div className='project' key={i}>\n                        <h4>{project.description}</h4>\n                        <p style={{color: new Date(project.dueDate).getTime() < Date.now() && 'red'}}><span>Due:</span> {project.dueDate}</p>\n                        <button value='2' onClick={e => changeStatus(e, project)}>Move to Completed</button>\n                    </div>\n                    ))}\n                </div>\n                <div className='main-3'>\n                    <h2 style={{backgroundColor: 'green'}}>Completed</h2>\n                    { projects[0] && projects.map((project, i) => (\n                        project.status === 2 &&\n                    <div className='project' key={i}>\n                        <h4>{project.description}</h4>\n                        <p style={{color: new Date(project.dueDate).getTime() < Date.now() && 'red'}}><span>Due:</span> {project.dueDate}</p>\n                        <button onClick={e => deleteProject(e, project)}>Remove Project</button>\n                    </div>\n                    ))}\n                </div>\n                <button className='addNew'>\n                    <Link to='/projects/new'>Add New Project</Link>\n                </button>\n            </div>\n\n        </>\n    )\n}\n\nexport default Main\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { navigate, Link } from '@reach/router'\n\nconst NewProject = (props) => {\n\n    const [form, setForm] = useState(\n        {}\n    )\n    const [errState, setErrState] = useState(\n        {}\n    )\n    const [disabled, setDisabled] = useState(true)\n\n    const descErr = 'Project must be at least 3 characters'\n\n    useEffect(() => {\n        setDisabled(true)\n        if(form.description && form.description.length > 2) {\n            if(form.dueDate) {\n                setDisabled(false)\n            }\n        }\n    }, [form])\n\n    const onChangeHandler = e => {\n        setForm(\n            {...form, [e.target.name]: e.target.value}\n        )\n    }\n\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        console.log(form)\n        const {description,dueDate} = form\n        axios.post(`http://localhost:8000/api/projects/new`, {\n            description,\n            dueDate\n        })\n        .then(res => {\n            console.log(res)\n            navigate('/')\n        })\n        .catch(err => {\n            const errors = err.response.data.errors\n            const errsDict = {}\n            for(let key in errors) {\n                errsDict[key] = errors[key].message\n            }\n            setErrState(\n                errsDict\n            )\n        })\n    }\n\n    return (\n        <div className='newProject'>\n            <Link to='/'>Home</Link>\n            <form action=\"\" onSubmit={e => onSubmitHandler(e)}>\n                {errState.description && <p style={{color: 'red'}}>{errState.description}</p>}\n                {form.description && form.description.length > 0 && form.description.length < 3 && <p style={{color: 'red'}}>{descErr}</p>}\n                <p htmlFor=\"\">Project</p>\n                <input type=\"text\" name='description' onChange={e => onChangeHandler(e)}/>\n                {errState.dueDate && <p style={{color: 'red'}}>{errState.dueDate}</p>}\n                <p htmlFor=\"\">Due Date</p>\n                <input type=\"date\" name='dueDate' onChange={e => onChangeHandler(e)}/>\n                <input className='submit' type=\"submit\" value=\"Plan Project\" disabled={disabled} style={{backgroundColor:disabled && 'gray'}}/>\n            </form>\n        </div>\n    )\n}\n\nexport default NewProject\n","import React from 'react';\nimport { Router } from '@reach/router'\nimport './App.css';\nimport Main from './views/Main';\nimport NewProject from './views/NewProject';\n\nfunction App() {\n  return (\n    <div className=\"App wrapper\">\n      <h1 style={{backgroundColor:'grey', margin: '2px 10px', padding: '5px 0', border: '1px solid black'}}>Project Manager</h1>\n      <Router>\n        <Main path='/'></Main>\n        <NewProject path='/projects/new'></NewProject>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}